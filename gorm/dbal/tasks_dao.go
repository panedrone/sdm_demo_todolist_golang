package dbal

// Code generated by a tool. DO NOT EDIT.
// Additional custom methods can be implemented in a separate file like <this_file>_ex.go.
// https://sqldalmaker.sourceforge.net/

import (
	"context"
	"sdm_demo_todolist/gorm/models"
)

type TasksDao struct {
	ds DataStore
}

// (C)RUD: tasks
// Generated/AI values are passed to DTO/model.

func (dao *TasksDao) CreateTask(ctx context.Context, p *models.Task) error {
	return dao.ds.Create(ctx, "tasks", p)
}

// C(R)UD: tasks

func (dao *TasksDao) ReadTaskList(ctx context.Context) (res []*models.Task, err error) {
	err = dao.ds.ReadAll(ctx, "tasks", &res)
	return
}

// C(R)UD: tasks

func (dao *TasksDao) ReadTask(ctx context.Context, tId int64) (*models.Task, error) {
	res := &models.Task{}
	err := dao.ds.Read(ctx, "tasks", res, tId)
	if err == nil {
		return res, nil
	}
	return nil, err
}

// CR(U)D: tasks

func (dao *TasksDao) UpdateTask(ctx context.Context, p *models.Task) (rowsAffected int64, err error) {
	rowsAffected, err = dao.ds.Update(ctx, "tasks", p)
	return
}

// CRU(D): tasks

func (dao *TasksDao) DeleteTask(ctx context.Context, p *models.Task) (rowsAffected int64, err error) {
	rowsAffected, err = dao.ds.Delete(ctx, "tasks", p)
	return
}

func (dao *TasksDao) DeleteProjectTasks(ctx context.Context, pId string) (rowsAffected int64, err error) {
	sql := `delete from tasks where p_id=?`
	rowsAffected, err = dao.ds.Exec(ctx, sql, pId)
	return
}

func (dao *TasksDao) GetProjectTasks(ctx context.Context, gId string) (res []*models.TaskLi, err error) {
	sql := `select t_id, t_priority, t_date, t_subject from tasks where p_id =? 
		order by t_id`
	errMap := make(map[string]int)
	_onRow := func(row map[string]interface{}) {
		obj := models.TaskLi{}
		SetInt64(&obj.TId, row, "t_id", errMap)
		SetInt64(&obj.TPriority, row, "t_priority", errMap)
		SetString(&obj.TDate, row, "t_date", errMap)
		SetString(&obj.TSubject, row, "t_subject", errMap)
		res = append(res, &obj)
	}
	err = dao.ds.QueryAllRows(ctx, sql, _onRow, gId)
	if err == nil {
		err = ErrMapToErr(errMap)
	}
	return
}
