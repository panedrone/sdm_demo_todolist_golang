package dbal

// Code generated by a tool. DO NOT EDIT.
// Additional custom methods can be implemented in a separate file like <this_file>_ex.go.
// https://sqldalmaker.sourceforge.net/

import (
	"context"
	"sdm_demo_todolist/raw_sql/dbal/dto"
)

type TasksDao struct {
	ds DataStore
}

// (C)RUD: tasks
// Generated/AI values are passed to DTO/model.

func (dao *TasksDao) CreateTask(ctx context.Context, p *dto.Task) (err error) {
	sql := `insert into tasks (p_id, t_priority, t_date, t_subject, t_comments) values (?, ?, ?, ?, ?)`
	res, err := dao.ds.Insert(ctx, sql, "t_id", p.PId, p.TPriority, p.TDate, p.TSubject, p.TComments)
	if err == nil {
		err = SetRes(&p.TId, res)
	}
	return
}

// C(R)UD: tasks

func (dao *TasksDao) ReadTask(ctx context.Context, tId int64) (res *dto.Task, err error) {
	sql := `select * from tasks where t_id=?`
	row, err := dao.ds.QueryRow(ctx, sql, tId)
	if err != nil {
		return
	}
	res = &dto.Task{}
	errMap := make(map[string]int)
	SetInt64(&res.TId, row, "t_id", errMap)
	SetInt64(&res.PId, row, "p_id", errMap)
	SetInt64(&res.TPriority, row, "t_priority", errMap)
	SetString(&res.TDate, row, "t_date", errMap)
	SetString(&res.TSubject, row, "t_subject", errMap)
	SetString(&res.TComments, row, "t_comments", errMap)
	err = ErrMapToErr(errMap)
	return
}

// CR(U)D: tasks

func (dao *TasksDao) UpdateTask(ctx context.Context, p *dto.Task) (rowsAffected int64, err error) {
	sql := `update tasks set p_id=?, t_priority=?, t_date=?, t_subject=?, t_comments=? where t_id=?`
	rowsAffected, err = dao.ds.Exec(ctx, sql, p.PId, p.TPriority, p.TDate, p.TSubject, p.TComments, p.TId)
	return
}

// CRU(D): tasks

func (dao *TasksDao) DeleteTask(ctx context.Context, p *dto.Task) (rowsAffected int64, err error) {
	sql := `delete from tasks where t_id=?`
	rowsAffected, err = dao.ds.Exec(ctx, sql, p.TId)
	return
}

func (dao *TasksDao) GetGroupTasks(ctx context.Context, gId int64) (res []*dto.TaskLi, err error) {
	sql := `select t_id, t_priority, t_date, t_subject from tasks where p_id =? 
		order by t_id`
	errMap := make(map[string]int)
	_onRow := func(row map[string]interface{}) {
		obj := dto.TaskLi{}
		SetInt64(&obj.TId, row, "t_id", errMap)
		SetInt64(&obj.TPriority, row, "t_priority", errMap)
		SetString(&obj.TDate, row, "t_date", errMap)
		SetString(&obj.TSubject, row, "t_subject", errMap)
		res = append(res, &obj)
	}
	err = dao.ds.QueryAllRows(ctx, sql, _onRow, gId)
	if err == nil {
		err = ErrMapToErr(errMap)
	}
	return
}

func (dao *TasksDao) DeleteGroupTasks(ctx context.Context, gId string) (rowsAffected int64, err error) {
	sql := `delete from tasks where p_id=?`
	rowsAffected, err = dao.ds.Exec(ctx, sql, gId)
	return
}

func (dao *TasksDao) GetCount(ctx context.Context) (res int64, err error) {
	sql := `select count(*) from tasks`
	r, err := dao.ds.Query(ctx, sql)
	if err == nil {
		err = SetRes(&res, r)
	}
	return
}

func (dao *TasksDao) GetGroupTasks2(ctx context.Context, gId int64) (res []*dto.TaskLi, err error) {
	sql := `select t_id, t_priority, t_date, t_subject from tasks where p_id=?`
	errMap := make(map[string]int)
	_onRow := func(row map[string]interface{}) {
		obj := dto.TaskLi{}
		SetInt64(&obj.TId, row, "t_id", errMap)
		SetInt64(&obj.TPriority, row, "t_priority", errMap)
		SetString(&obj.TDate, row, "t_date", errMap)
		SetString(&obj.TSubject, row, "t_subject", errMap)
		res = append(res, &obj)
	}
	err = dao.ds.QueryAllRows(ctx, sql, _onRow, gId)
	if err == nil {
		err = ErrMapToErr(errMap)
	}
	return
}
