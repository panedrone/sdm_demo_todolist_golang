package dbal

// Code generated by a tool. DO NOT EDIT.
// Additional custom methods can be implemented in a separate file like <this_file>_ex.go.
// https://sqldalmaker.sourceforge.net/

import (
	"context"
	"sdm_demo_todolist/raw_sql/dbal/dto"
)

type GroupsDao struct {
	ds DataStore
}

// (C)RUD: groups
// Generated/AI values are passed to DTO/model.

func (dao *GroupsDao) CreateGroup(ctx context.Context, p *dto.Group) (err error) {
	sql := `insert into groups (g_name) values (?)`
	res, err := dao.ds.Insert(ctx, sql, "g_id", p.GName)
	if err == nil {
		err = assign(&p.GId, res)
	}
	return
}

// C(R)UD: groups

func (dao *GroupsDao) ReadGroup(ctx context.Context, gId int64) (res *dto.Group, err error) {
	sql := `select * from groups where g_id=?`
	res = &dto.Group{}
	_fa := []interface{}{
		&res.GId,
		&res.GName,
	}
	err = dao.ds.QueryByFA(ctx, sql, _fa, gId)
	return
}

// CR(U)D: groups

func (dao *GroupsDao) UpdateGroup(ctx context.Context, p *dto.Group) (rowsAffected int64, err error) {
	sql := `update groups set g_name=? where g_id=?`
	rowsAffected, err = dao.ds.Exec(ctx, sql, p.GName, p.GId)
	return
}

// CRU(D): groups

func (dao *GroupsDao) DeleteGroup(ctx context.Context, p *dto.Group) (rowsAffected int64, err error) {
	sql := `delete from groups where g_id=?`
	rowsAffected, err = dao.ds.Exec(ctx, sql, p.GId)
	return
}

func (dao *GroupsDao) GetGroups(ctx context.Context) (res []*dto.Group, err error) {
	sql := `select g.*,  
		(select count(*) from tasks where g_id=g.g_id) as g_tasks_count 
		from groups g`
	_onRow := func() (interface{}, func()) {
		_obj := &dto.Group{}
		return []interface{}{
				&_obj.GId,
				&_obj.GName,
				&_obj.GTasksCount,
			}, func() {
				res = append(res, _obj)
			}
	}
	err = dao.ds.QueryAllByFA(ctx, sql, _onRow)
	return
}

func (dao *GroupsDao) GetGroupsIds(ctx context.Context) (res []int64, err error) {
	sql := `select g.*,  
		(select count(*) from tasks where g_id=g.g_id) as g_tasks_count 
		from groups g`
	errMap := make(map[string]int)
	onRow := func(val interface{}) {
		var data int64
		fromVal(&data, val, errMap)
		res = append(res, data)
	}
	err = dao.ds.QueryAll(ctx, sql, onRow)
	if err == nil {
		err = errMapToErr(errMap)
	}
	return
}

func (dao *GroupsDao) GetGroupsId(ctx context.Context) (res int64, err error) {
	sql := `select g.*,  
		(select count(*) from tasks where g_id=g.g_id) as g_tasks_count 
		from groups g`
	r, err := dao.ds.Query(ctx, sql)
	if err == nil {
		err = assign(&res, r)
	}
	return
}
